// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import { handleAuthError } from '@/utils/authErrorHandler';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || 'https://yfaiauooxwvekdimfeuu.supabase.co';
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlmYWlhdW9veHd2ZWtkaW1mZXV1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzU5NzQ4MDAsImV4cCI6MjA1MTU1MDgwMH0.placeholder_key';

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Check if environment variables are missing and show a warning
if (!import.meta.env.VITE_SUPABASE_URL || !import.meta.env.VITE_SUPABASE_ANON_KEY) {
  console.warn('⚠️ Supabase environment variables are missing. Using fallback values. Please create a .env file with VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY');
}

// Custom storage adapter that handles incognito mode
const createStorageAdapter = () => {
  const isAvailable = (storage: Storage) => {
    try {
      const testKey = '__storage_test__';
      storage.setItem(testKey, 'test');
      storage.removeItem(testKey);
      return true;
    } catch (e) {
      return false;
    }
  };

  const safeGetItem = (key: string) => {
    try {
      return localStorage.getItem(key);
    } catch (e) {
      console.warn('localStorage not available, using memory fallback');
      return null;
    }
  };

  const safeSetItem = (key: string, value: string) => {
    try {
      localStorage.setItem(key, value);
    } catch (e) {
      console.warn('localStorage not available, using memory fallback');
    }
  };

  const safeRemoveItem = (key: string) => {
    try {
      localStorage.removeItem(key);
    } catch (e) {
      console.warn('localStorage not available, using memory fallback');
    }
  };

  return {
    getItem: safeGetItem,
    setItem: safeSetItem,
    removeItem: safeRemoveItem,
  };
};

export const supabase = createClient(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: createStorageAdapter(),
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
  },
  global: {
    headers: {
      'X-Client-Info': 'supabase-js-react'
    }
  }
});

// Global error interceptor for handling user_not_found errors
supabase.auth.onAuthStateChange(async (event, session) => {
  if (event === 'TOKEN_REFRESHED' && session) {
    try {
      // Check if the user still exists in the database
      const { data: profile, error } = await supabase
        .from('profiles')
        .select('id')
        .eq('id', session.user.id)
        .single();
      
      if (error && error.code === 'PGRST116') {
        // User not found in database, sign them out
        console.warn('User not found in database, signing out automatically');
        await supabase.auth.signOut({ scope: 'global' });
        
        // Clear local storage
        Object.keys(localStorage).forEach((key) => {
          if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
            localStorage.removeItem(key);
          }
        });
        
        // Redirect to login page
        if (window.location.pathname.startsWith('/dashboard')) {
          window.location.href = '/auth';
        }
      }
    } catch (profileError) {
      console.error('Error checking user profile:', profileError);
    }
  }
});